<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="user">

	<!-- 아이디(이메일) 중복검사 -->
	<select id="userIdCheck" parameterType="String" resultType="int">
		SELECT COUNT(*) FROM T_MEMBER WHERE MEM_ID = #{mem_id}
	</select> 
	
	<!-- 닉네임 중복검사 -->
	<select id="userNickCheck" parameterType="String" resultType="int">
		SELECT COUNT(*) FROM T_MEMBER WHERE MEM_NAME = #{mem_name}
	</select>
	
	<!-- 로그인 체크 -->
	<select id="userLoginCheck" resultType="userVO">
		SELECT * FROM T_MEMBER WHERE MEM_ID = #{mem_id} AND MEM_PW = #{mem_pw} AND MEM_CATE = #{mem_cate}
	</select>
	
	<!-- 회원 등록 -->
	<insert id="joinUser" parameterType="userVO">
		INSERT INTO T_MEMBER
			(MEM_IDX, MEM_CATE, MEM_ID, MEM_PW, MEM_NAME)
		VALUES (MEM_SQ.NEXTVAL, #{mem_cate}, #{mem_id}, #{mem_pw}, #{mem_name})	
	</insert>
	
	<!-- 이메일 인증(권한상태 업데이트) -->
 <update id="updateAuthstatus" parameterType="userVO">
		UPDATE T_MEMBER
		   SET AUTH_STATUS = '1'
		 WHERE MEM_ID = #{mem_id}
	</update>
	
	<!-- 권한상태 불러오기 -->
	<select id="getAuthStatus" parameterType="String" resultType="String">
		SELECT AUTH_STATUS FROM T_MEMBER WHERE MEM_ID = #{mem_id}
	</select>
	
	<!-- 회원정보 불러오기 -->
	<select id="getOneMember" parameterType="String" resultType="userVO">
		SELECT * FROM T_MEMBER WHERE MEM_ID = #{mem_id}
	</select>
	
	<!-- client가 회원가입시 입력한 Email이 db에 중복인지 검사 -->
	<select id="getMemberEmail" parameterType="userVO" resultType="int">
		SELECT COUNT(*) FROM T_MEMBER
		WHERE MEM_ID = #{mem_id}
	</select>
	
	<!-- 자동로그인 설정 -->
	<update id="updateKeepLogin">
		UPDATE T_MEMBER 
		   SET MEM_SESSIONKEY = #{mem_sessionkey}
		     , MEM_SESSIONLIMIT = #{mem_sessionlimit}
		 WHERE MEM_ID = #{mem_id}
	</update>
	
	
	<!-- 자동로그인 설정 여부 -->
	<select id="getCheckLoginBefore" resultType="userVO">
		SELECT * FROM T_MEMBER
		 WHERE MEM_SESSIONKEY = #{loginCookie}
		   AND MEM_SESSIONLIMIT > now()
	</select>
	
	<!-- sns 소셜 회원가입 -->
	<insert id="setSnsRegister" parameterType="userVO">
		INSERT INTO T_MEMBER
			   (MEM_IDX, MEM_ID, MEM_PW, MEM_NAME, MEM_CATE)
		VALUES (MEM_SQ.NEXTVAL, #{mem_id}, #{mem_pw}, #{mem_name}, #{mem_cate})
	</insert>
	
	
	<!-- 비밀번호 재설정 -->
	<!-- <update id="updatePassword" parameterType="userVO">
		UPDATE T_MEMBER
		   SET MEM_PW = #{mem_pw}
		 WHERE MEM_ID = #{mem_id}
	</update> -->
	
	<!-- ================================= 마이페이지 =========================================== -->
	<!-- 회원정보 수정하기 -->
	<update id="updateMember" parameterType="userVO">
		UPDATE T_MEMBER
		<set>
	       <if test='mem_name != null and !mem_name.equals("")'>MEM_NAME = #{mem_name},</if>
	       <if test='mem_pw != null and !mem_pw.equals("e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855")'>MEM_PW = #{mem_pw},</if>
	       <if test='mem_phone != null and !mem_phone.equals("")'>MEM_PHONE = #{mem_phone},</if>
	       <if test='mem_birth != null and !mem_birth.equals("--")'>MEM_BIRTH = #{mem_birth},</if>
	       <if test='mem_gender != null and !mem_gender.equals("")'>MEM_GENDER = #{mem_gender},</if>
	       <if test='mem_nationality != null and !mem_nationality.equals("")'>MEM_NATIONALITY = #{mem_nationality},</if>
	       <if test='auth_status != null and !auth_status.equals("")'>AUTH_STATUS = #{auth_status},</if>
	       <if test='mem_address != null and !mem_address.equals("")'>MEM_ADDRESS = #{mem_address},</if>
	       <if test='mem_nationality != null and !mem_nationality.equals("")'>MEM_NATIONALITY = #{mem_nationality},</if>
	       <if test='auth_status != null and !auth_status.equals("")'>AUTH_STATUS = #{auth_status},</if>
	       <if test="mailling_fl != null">MAILLING_FL = #{mailling_fl},</if>
	       <if test="sms_fl != null">SMS_FL = #{sms_fl},</if>
	     </set>
		 WHERE MEM_ID = #{mem_id}
	</update>
	
	<!-- 비밀번호 체크 -->
	<select id="userPwCheck" parameterType="Map" resultType="int">
		SELECT COUNT(*) FROM T_MEMBER
		 WHERE MEM_ID = #{mem_id} AND MEM_PW = #{mem_pw}
	</select>
	
	<!-- 이력서 입력 -->
	<insert id="insertResume" parameterType="ResumeVO" useGeneratedKeys="true" keyProperty="RESUME_IDX">
		<selectKey keyProperty="RESUME_IDX" resultType="String" order="BEFORE">
			SELECT RESUME_SQ.NEXTVAL FROM DUAL
		</selectKey>
		INSERT INTO T_MEMBER_RESUME
			(
			 	RESUME_IDX,	MEM_NAME, WISH_DO, WISH_SI, JOB_CATE, 
			 	JOB_CATE_CHILD, REQ_SALARY_MIN, REQ_SALARY_MAX, SALARY_TYPE, WORK_TIME,
			 	<if test='work_time_start != null and !work_time_start.equals("")'>WORK_TIME_START,</if>
			 	<if test='work_time_end != null and !work_time_end.equals("")'>WORK_TIME_END,</if>
			 	WORK_TIME_ISWEEK, WORK_TIME_WEEK, DORMITORY, INTRODUCE, GRADUATE_SCH,
			 	<if test='dep != null and !dep.equals("")'>DEP,</if>
			 	<if test='final_a_m != null and !final_a_m.equals("")'>FINAL_A_M,</if>
			 	<if test='final_a_y != null and !final_a_y.equals("")'>FINAL_A_Y,</if>
			 	<if test='final_g_m != null and !final_g_m.equals("")'>FINAL_G_M,</if>
			 	<if test='final_g_y != null and !final_g_y.equals("")'>FINAL_G_Y,</if>
			 	<if test='final_region != null and !final_region.equals("")'>FINAL_REGION,</if>
			 	<if test='final_sch != null and !final_sch.equals("")'>FINAL_SCH,</if>
			 	<if test='final_major != null and !final_major.equals("")'>FINAL_MAJOR,</if>
			 	LANG_LEARN,
			 	<if test='lang_sch != null and !lang_sch.equals("")'>LANG_SCH,</if>
			 	KO_SPK_ABIL, KO_DOC_ABIL, CH_SPK_ABIL, CH_DOC_ABIL,	EN_SPK_ABIL, EN_DOC_ABIL, VT_SPK_ABIL, VT_DOC_ABIL,
			 	REGDATE, IP,
			 	<if test='other_lang != null and !other_lang.equals("")'>OTHER_LANG</if>
		 	)
		 	
		VALUES
			(
			 	RESUME_SQ.NEXTVAL, #{mem_name}, #{wish_do}, #{wish_si}, #{job_cate},
			 	#{job_cate_child}, #{req_salary_min}, #{req_salary_max}, #{salary_type}, #{work_time},
			 	<if test='work_time_start != null and !work_time_start.equals("")'>#{work_time_start},</if>
			 	<if test='work_time_end != null and !work_time_end.equals("")'>#{work_time_end},</if>
			 	#{work_time_isweek}, #{work_time_week}, #{dormitory}, #{introduce}, #{graduate_sch},
			 	<if test='dep != null and !dep.equals("")'>#{dep},</if>
			 	<if test='final_a_m != null and !final_a_m.equals("")'>#{final_a_m},</if>
			 	<if test='final_a_y != null and !final_a_y.equals("")'>#{final_a_y},</if>
			 	<if test='final_g_m != null and !final_g_m.equals("")'>#{final_g_m},</if>
			 	<if test='final_g_y != null and !final_g_y.equals("")'>#{final_g_y},</if>
			 	<if test='final_region != null and !final_region.equals("")'>#{final_region},</if>
			 	<if test='final_sch != null and !final_sch.equals("")'>#{final_sch},</if>
			 	<if test='final_major != null and !final_major.equals("")'>#{final_major},</if>
			 	#{lang_learn},
			 	<if test='lang_sch != null and !lang_sch.equals("")'>#{lang_sch},</if>
			 	#{ko_spk_abil}, #{ko_doc_abil}, #{ch_spk_abil},	#{ch_doc_abil},	#{en_spk_abil},	#{en_doc_abil},	#{vt_spk_abil},	#{vt_doc_abil},
			 	SYSDATE, #{ip},
			 	<if test='other_lang != null and !other_lang.equals("")'>#{other_lang}</if>
		 	)
		WHERE MEM_ID = #{mem_id}
	</insert>
	
	<!-- 이력서 경력 입력 -->
	<!-- <insert id="insertCareer" parameterType="ResumeVO">
		INSERT INTO T_MEMBER_CAREER
			( CAREER_IDX, RESUME_IDX, JOIN_YEAR, JOIN_MONTH, RESIGN_YEAR, RESIGN_MONTH, REGION, COMPANY, TASK )
		VALUES
			( CAREER_SQ.NEXTVAL, #{resume_idx}, #{join_year}, #{join_month}, #{resign_year}, #{resign_month}, #{region}, #{company}, #{task} )
	</insert> -->
	
	<!-- 이력서 파일업로드 -->
	<!-- <insert id="inserFile" parameterType="map">
		INSERT INTO T_RESUME_FILE
			( FILE_IDX, RESUME_IDX, ORI_FILE, SAVE_FILE, FILE_SIZE )
		VALUES
			( RESUME_FILE_SQ.NEXTVAL, #{RESUME_IDX}, #{ORI_FILE}, #{SAVE_FILE}, #{FILE_SIZE} )
	</insert> -->
	
	<!-- 이력서 가져오기 -->
	<!-- <select id="getOneResume" parameterType="String" resultType="ResumeVO">
		SELECT * FROM T_MEMBER_RESUME
		 WHERE MEM_ID = #{mem_id}
	</select> -->
	
</mapper>









